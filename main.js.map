{"version":3,"file":"main.js","mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,sBAAsB;AAC1C,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,QAAQ;AAC/D;AACA;AACA;AACA;;AAQE;;;ACvDF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,8CAAe,IAAI,EAAC;;;AC/BM;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,OAAI;AAC7B;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,OAAI;AAC7B;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAe,SAAS,EAAC;;;ACvQW;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,6CAAe,MAAM,EAAC;;;ACjBP;AACe;;AAE9B,sBAAsB,MAAM;AAC5B;;AAEA,sBAAsB,MAAM;AAC5B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA,UAAU;AACV,YAAY,QAAQ;AACpB;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qDAAqD,+BAA+B;AACpF;;AAEA;AACA,YAAY,OAAO;AACnB;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA,UAAU;AACV,YAAY,QAAQ;AACpB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,sBAAsB;AAC1B;AACA;;AAEA,iDAAe,OAAO,EAAC;;;AC1GS;AACT;;AAEvB,UAAO","sources":["webpack://battleship/./src/js/dom.js","webpack://battleship/./src/js/ship.js","webpack://battleship/./src/js/gameboard.js","webpack://battleship/./src/js/player.js","webpack://battleship/./src/js/runGame.js","webpack://battleship/./src/js/index.js"],"sourcesContent":["const renderBoard = (container, gameboard, isEnemy, sqClickCb = null) => {\n    if (isEnemy && !sqClickCb) {\n        throw new Error('Callback not provided for enemy board!');\n    }\n\n    // Clear DOM board\n    container.replaceChildren();\n\n    for (let i = 0; i < gameboard.length; i++) {\n        for (let j = 0; j < gameboard.length; j++) {\n            const square = document.createElement('div');\n            square.classList.add('square');\n            square.dataset.row = i;\n            square.dataset.column = j;\n            if (!isEnemy && gameboard.hasShipAt([i, j])) {\n                // Make ship visible in DOM\n                square.classList.add('ship');\n            }\n            if (isEnemy) {\n                square.addEventListener('click', sqClickCb);\n                square.classList.add('enemy-square');\n            }\n            container.appendChild(square);\n        }\n    }\n};\n\nconst markMiss = (square) => {\n    square.classList.add('miss');\n};\n\nconst markHit = (square) => {\n    square.classList.add('hit');\n};\n\nconst activateRandomizeShips = (callback) => {\n    document\n        .querySelector('#randomize-ships-btn')\n        .addEventListener('click', callback);\n};\n\nconst displayGameOver = (message) => {\n    document.querySelector('#game-over-modal').showModal();\n    document.querySelector('#winner').textContent = `${message}`;\n    document\n        .querySelector('#play-again-btn')\n        .addEventListener('click', () => window.location.reload());\n};\n\nexport {\n    renderBoard,\n    markMiss,\n    markHit,\n    activateRandomizeShips,\n    displayGameOver,\n};\n","class Ship {\n    #length;\n    #hits;\n\n    constructor(length) {\n        if (length < 2 || length > 5) {\n            throw new Error('Ship length must be between 2 and 5!');\n        }\n        this.#length = length;\n        this.#hits = 0;\n    }\n\n    get length() {\n        return this.#length;\n    }\n\n    get hits() {\n        return this.#hits;\n    }\n\n    // Increase number of 'hits' on ship, cap at length\n    hit() {\n        if (this.#hits < this.#length) this.#hits++;\n    }\n\n    // Calculate whether or not ship is sunk based on its length and hits received\n    isSunk() {\n        return this.#hits >= this.#length;\n    }\n}\n\nexport default Ship;\n","import Ship from './ship';\n\nclass Gameboard {\n    #board;\n    #length;\n    #ships;\n    #hits;\n    #misses;\n    #allShipsSunk;\n\n    constructor() {\n        this.#length = 10;\n        this.#board = [...Array(this.#length)].map(() =>\n            Array(this.#length).fill(null)\n        );\n        this.#ships = [];\n        this.#hits = new Set();\n        this.#misses = new Set();\n        this.#allShipsSunk = false;\n    }\n\n    get length() {\n        return this.#length;\n    }\n\n    get ships() {\n        return this.#ships;\n    }\n\n    // Returns array of received missed attack coordinates\n    get misses() {\n        return [...this.#misses].map((miss) => JSON.parse(miss));\n    }\n\n    get allShipsSunk() {\n        return this.#allShipsSunk;\n    }\n\n    #isOnBoard(coordinates) {\n        const [row, col] = coordinates;\n        return (\n            row >= 0 &&\n            row < this.#board.length &&\n            col >= 0 &&\n            col < this.#board.length\n        );\n    }\n\n    hasShipAt(coordinates) {\n        const [row, col] = coordinates;\n        return !!this.#board[row][col];\n    }\n\n    getShipAt(coordinates) {\n        if (!this.hasShipAt(coordinates)) {\n            throw new Error('No ship at given coordinates!');\n        }\n        const [row, col] = coordinates;\n        return this.#board[row][col];\n    }\n\n    #isValidShipPlacement(startCoordinates, endCoordinates) {\n        // Ensure coordinates are on the board\n        if (\n            !this.#isOnBoard(startCoordinates) ||\n            !this.#isOnBoard(endCoordinates)\n        ) {\n            return false;\n        }\n\n        // Prevent diagonal ship placement\n        if (\n            startCoordinates[0] !== endCoordinates[0] &&\n            startCoordinates[1] !== endCoordinates[1]\n        ) {\n            throw new Error('Ship cannot be placed diagonally!');\n        }\n\n        /**\n         * Ensure coordinates from startCoordinates to endCoordinates (inclusive)\n         * are not already occupied by another ship.\n         */\n        if (startCoordinates[0] === endCoordinates[0]) {\n            let [row, col1] = startCoordinates;\n            let col2 = endCoordinates[1];\n\n            /**\n             * Ensure col1 <= col2 since we are incrementing from col1 to col2 in\n             * the for loop below.\n             */\n            if (col1 > col2) {\n                [col1, col2] = [col2, col1];\n            }\n\n            // Traverse horizontally\n            for (let j = col1; j <= col2; j++) {\n                if (this.hasShipAt([row, j])) {\n                    // Coordinates already occupied\n                    return false;\n                }\n            }\n\n            return true;\n        } else {\n            let [row1, col] = startCoordinates;\n            let row2 = endCoordinates[0];\n\n            /**\n             * Ensure row1 <= row2 since we are incrementing from row1 to row2 in\n             * the for loop below.\n             */\n            if (row1 > row2) {\n                [row1, row2] = [row2, row1];\n            }\n\n            // Traverse vertically\n            for (let i = row1; i <= row2; i++) {\n                if (this.hasShipAt([i, col])) {\n                    // Coordinates already occupied\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n\n    // Places ship horizontally\n    #placeShipHorizontally(startCoordinates, endCoordinates) {\n        let [row, col1] = startCoordinates;\n        let col2 = endCoordinates[1];\n\n        /**\n         * Ensure col1 <= col2 since we are incrementing from col1 to col2 in\n         * the for loop below to place the ship.\n         */\n        if (col1 > col2) {\n            [col1, col2] = [col2, col1];\n        }\n\n        const ship = new Ship(col2 - col1 + 1);\n        this.#ships.push(ship);\n        for (let j = col1; j <= col2; j++) {\n            this.#board[row][j] = ship;\n        }\n    }\n\n    // Places ship vertically\n    #placeShipVertically(startCoordinates, endCoordinates) {\n        let [row1, col] = startCoordinates;\n        let row2 = endCoordinates[0];\n\n        /**\n         * Ensure row1 <= row2 since we are incrementing from row1 to row2 in\n         * the for loop below to place the ship.\n         */\n        if (row1 > row2) {\n            [row1, row2] = [row2, row1];\n        }\n\n        const ship = new Ship(row2 - row1 + 1);\n        this.#ships.push(ship);\n        for (let i = row1; i <= row2; i++) {\n            this.#board[i][col] = ship;\n        }\n    }\n\n    // Places ship at specified coordinates if possible\n    placeShip(startCoordinates, endCoordinates) {\n        if (this.#isValidShipPlacement(startCoordinates, endCoordinates)) {\n            if (startCoordinates[0] === endCoordinates[0]) {\n                this.#placeShipHorizontally(startCoordinates, endCoordinates);\n            } else {\n                this.#placeShipVertically(startCoordinates, endCoordinates);\n            }\n        }\n    }\n\n    #placeShipRandomly(shipLength) {\n        if (typeof shipLength === 'undefined') {\n            throw new Error('Missing ship length!');\n        }\n        let isShipVertical = Math.random() < 0.5;\n        let rowStart = Math.floor(Math.random() * 10);\n        let colStart = Math.floor(Math.random() * 10);\n        let rowEnd;\n        let colEnd;\n        if (isShipVertical) {\n            rowEnd = rowStart + shipLength - 1;\n            colEnd = colStart;\n        } else {\n            rowEnd = rowStart;\n            colEnd = colStart + shipLength - 1;\n        }\n        while (\n            !this.#isValidShipPlacement([rowStart, colStart], [rowEnd, colEnd])\n        ) {\n            rowStart = Math.floor(Math.random() * 10);\n            colStart = Math.floor(Math.random() * 10);\n            if (isShipVertical) {\n                rowEnd = rowStart + shipLength - 1;\n                colEnd = colStart;\n            } else {\n                rowEnd = rowStart;\n                colEnd = colStart + shipLength - 1;\n            }\n        }\n        this.placeShip([rowStart, colStart], [rowEnd, colEnd]);\n    }\n\n    #reset() {\n        this.#length = 10;\n        this.#board = [...Array(this.#length)].map(() =>\n            Array(this.#length).fill(null)\n        );\n        this.#ships = [];\n        this.#hits = new Set();\n        this.#misses = new Set();\n        this.#allShipsSunk = false;\n    }\n\n    randomizeShips() {\n        this.#reset();\n        this.#placeShipRandomly(5);\n        this.#placeShipRandomly(4);\n        this.#placeShipRandomly(3);\n        this.#placeShipRandomly(3);\n        this.#placeShipRandomly(2);\n    }\n\n    /**\n     * Receives attack at coordinates and returns whether or not those\n     * coordinates have been attacked previously.\n     */\n    receiveAttack(coordinates) {\n        if (!this.#isOnBoard(coordinates)) {\n            throw new Error('Attack coordinates out of bounds!');\n        }\n\n        // Returns false if coordinates have previously been attacked\n        if (\n            this.#hits.has(JSON.stringify(coordinates)) ||\n            this.#misses.has(JSON.stringify(coordinates))\n        ) {\n            return false;\n        }\n\n        if (this.hasShipAt(coordinates)) {\n            // Ship present at coordinates\n            const ship = this.getShipAt(coordinates);\n            ship.hit();\n            this.#hits.add(JSON.stringify(coordinates));\n\n            // Update whether or not all ships have been sunk\n            this.#allShipsSunk = this.#ships.every((ship) => ship.isSunk());\n        } else {\n            // Ship not present at coordinates\n            this.#misses.add(JSON.stringify(coordinates));\n        }\n        return true;\n    }\n}\n\nexport default Gameboard;\n","import Gameboard from './gameboard';\n\nclass Player {\n    #type;\n    #gameboard;\n\n    constructor(type) {\n        if (type !== 'human' && type !== 'computer') {\n            throw new Error('Invalid player type!');\n        }\n        this.#type = type;\n        this.#gameboard = new Gameboard();\n    }\n\n    get type() {\n        return this.#type;\n    }\n\n    get gameboard() {\n        return this.#gameboard;\n    }\n}\n\nexport default Player;\n","import {\n    renderBoard,\n    markMiss,\n    markHit,\n    activateRandomizeShips,\n    displayGameOver,\n} from './dom';\nimport Player from './player';\n\nconst playerOne = new Player('human');\nconst playerOneGameboard = playerOne.gameboard;\n\nconst playerTwo = new Player('computer');\nconst playerTwoGameboard = playerTwo.gameboard;\n\nconst players = [playerOne, playerTwo];\nlet activePlayer = players[0];\n\nconst switchTurns = () => {\n    activePlayer = activePlayer === players[0] ? players[1] : players[0];\n};\n\nconst playerOneWon = () => {\n    return playerTwoGameboard.allShipsSunk;\n};\n\nconst playerTwoWon = () => {\n    return playerOneGameboard.allShipsSunk;\n};\n\nconst getRandomCoordinates = () => {\n    const randomRow = Math.floor(Math.random() * 10);\n    const randomCol = Math.floor(Math.random() * 10);\n    return [randomRow, randomCol];\n};\n\nconst takeTurn = (e) => {\n    if (activePlayer !== players[0]) {\n        return;\n    }\n\n    // Player one's turn\n    const attackedCoordinates = [e.target.dataset.row, e.target.dataset.column];\n    if (playerTwoGameboard.receiveAttack(attackedCoordinates)) {\n        if (playerTwoGameboard.hasShipAt(attackedCoordinates)) {\n            markHit(e.target);\n            if (playerOneWon()) {\n                displayGameOver('You win!');\n                return;\n            }\n        } else {\n            markMiss(e.target);\n        }\n    } else {\n        return;\n    }\n    switchTurns();\n\n    // Player two's turn\n    setTimeout(() => {\n        let randomCoordinates = getRandomCoordinates();\n\n        while (!playerOneGameboard.receiveAttack(randomCoordinates)) {\n            randomCoordinates = getRandomCoordinates();\n        }\n\n        const [chosenRow, chosenCol] = randomCoordinates;\n        const attackedSquare = document.querySelector(\n            `#player-one-board > .square:nth-child(${chosenRow * 10 + chosenCol + 1})`\n        );\n\n        if (playerOneGameboard.hasShipAt(randomCoordinates)) {\n            markHit(attackedSquare);\n            if (playerTwoWon()) {\n                displayGameOver('Computer wins!');\n                return;\n            }\n        } else {\n            markMiss(attackedSquare);\n        }\n        switchTurns();\n    }, 500);\n};\n\nconst randomizeShips = () => {\n    playerOneGameboard.randomizeShips();\n    playerTwoGameboard.randomizeShips();\n\n    renderBoard(\n        document.querySelector('#player-one-board'),\n        playerOneGameboard,\n        false\n    );\n    renderBoard(\n        document.querySelector('#player-two-board'),\n        playerTwoGameboard,\n        true,\n        takeTurn\n    );\n};\n\nconst runGame = () => {\n    activateRandomizeShips(randomizeShips);\n    randomizeShips();\n};\n\nexport default runGame;\n","import runGame from './runGame';\nimport '../styles.css';\n\nrunGame();\n"],"names":[],"sourceRoot":""}